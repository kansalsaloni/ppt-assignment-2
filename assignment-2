Q1.Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized.
Return the maximized sum.
Ans1. 
#include<bits/stdc++.h>
using namespace std;

int arrayPairSum(vector<int>nums)
{
    int sum=0;
    sort(nums.begin(), nums.end());
      for (int i = 0; i < nums.size(); i += 2) {
        sum += nums[i];
    }

    return sum;

}
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

int target;
cout << "Enter the target sum: ";
cin >> target<<endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
 int maxSum = arrayPairSum(nums);
cout<<maxSum;
return 0;
}

output:
Input: nums = [1,4,3,2]
Output: 4
#########################################################################
Q2. Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. 
The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). 
Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. 
Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.
Ans2.
#include<bits/stdc++.h>
using namespace std;

int candyEat(vector<int>& nums, int n) {
    int maxCandies=n/2;
unordered_set<int>uniqueCandies;
    for (int i = 0; i < n; i++) {
        uniqueCandies.insert(nums[i]);    
    }

 return  min(uniqueCandies.size(), maxCandies);
}

int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;


vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
int result = candyEat(nums,n);
cout <<  result <<endl;
return 0;
}
OUTPUT:
Input: candyType = [1,1,2,2,3,3]
Output: 3
################################################################################
Q3. We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.
Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.
A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements
Ans3.
#include<bits/stdc++.h>
using namespace std;

int find(vector<int>nums){
int maxlength=0;
unordered_map<int,int>map;
for(int i=0;i<nums.size();i++)
{
    map[nums[i]]++;
}
for(auto it:map){
int firstel=it->first;
int lengthel=it->second;
if(map.find(firstel+1)!=map.end()){
        int secondel=map[firstel+1];
        int subsequenceLength = lengthel + secondel;
        if(subsequenceLength>maxlength)
        {
        maxlength=subsequenceLength;
        }
        }
}

}

return maxlength;
}
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;


vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
int result = find(nums);
cout <<  result <<endl;
return 0;
}
OUTPUT:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
###################################################################################
Q4. You have a long flowerbed in which some of the plots are planted, and some are not.However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can 
be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise..

Ans4.`
#include<bits/stdc++.h>
using namespace std;


int main() {
  int n;
  int check=0;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;


vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
  for (int i = 0; i < n; i++) {
       if( nums[i]==0 &&(i==0 || nums[i-1]==0) &&(i==n-1||nums[i+1]==0))
       {
       check=1;
       break;
       }
    }
 
if(check==0)
   cout << "false ";
else
cout<<"true";
    return 0;
}
OUTPUT:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
####################################################################################
Q5.Given an integer array nums, find three numbers whose product is maximum and return the maximum product.
Ans5.
 int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;


vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
    sort(nums.begin(), nums.end());
    int product1 = nums[n-1] * nums[n-2] * nums[n-3];

    // Calculate the product of the first two elements (negative numbers) and the last element (largest positive number)
    int product2 = nums[0] * nums[1] * nums[n-1];

   
    cout<<max(product1, product2);

OUTPUT:
Input: nums = [1,2,3]
Output: 6
####################################################################################
Q6. Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.
Ans6.


#include<bits/stdc++.h>
using namespace std;
int search(vector<int>& nums, int target) {
    int left = 0;
    int right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            return mid;  // Found the target, return its index
        } else if (nums[mid] < target) {
            left = mid + 1;  // Search in the right half of the array
        } else {
            right = mid - 1;  // Search in the left half of the array
        }
    }

    return -1;
    }
    
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
 int index = search(nums, target);
cout<<index;
OUTPUT:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
####################################################################################
Q7.An array is monotonic if it is either monotone increasing or monotone decreasing.
An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is
monotone decreasing if for all i <= j, nums[i] >= nums[j].
Ans7.

#include<bits/stdc++.h>
using namespace std;


int main() {
  int n;
 bool increasing = true;
 bool decreasing = true;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;


vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
  for (int i = 1; i < n; i++) {
      if(nums[i-1] <=nums[i])decreasing=false;
      if(nums[i-1] >=nums[i])increasing=false;
    }
 
if(increasing || decreasing;)
   cout << "true ";
else
cout<<"false";
    return 0;
}


OUTPUT:
Input: nums = [1,2,2,3]
Output: true
####################################################################################
Q8.You are given an integer array nums and an integer k.
In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k].
You can apply this operation at most once for each index i.
The score of nums is the difference between the maximum and minimum elements in nums.
Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

Ans8.

#include<bits/stdc++.h>
using namespace std;
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
    vector<int>result;
    for (int i = 0; i < nums.size(); i++) {
        if(nums[i]!=i+1){
          result.push_back(nums[i]);
          result.push_back(i+1);
        }
    }

    for(int i=0;i<2;i++)
    {
    cout<<result[i];
    }
return 0;
}

OUTPUT:

Input: nums = [1], k = 0
Output: 0
