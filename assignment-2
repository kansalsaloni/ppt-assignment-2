Q1. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
Ans1. 
#include<bits/stdc++.h>
using namespace std;
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

int target;
cout << "Enter the target sum: ";
cin >> target<<endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
unordered_map<int, int> map;
vector<int> result;
    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];
        if (map.count(complement)) {
          result.push_back(map[complement]);
          result.push_back(i);
        }
        
        map[nums[i]] = i;
    }
cout<<result[0];
cout<<result[1];

return 0;
}

output:nums = [2,7,11,15], target = 9
Output0 [0,1]
#########################################################################
Q2. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. 
Then return the number of elements in nums which are not equal to val.
Ans2.
#include<bits/stdc++.h>
using namespace std;

int removeElement(vector<int>& nums, int val) {
    int count = 0;
    int n = nums.size();

    for (int i = 0; i < n; i++) {
        if (nums[i] != val) {
            nums[count] = nums[i];
            count++;
        }
    }

    return count;
}

int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

int target;
cout << "Enter the target sum: ";
cin >> target<<endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
int result = removeElement(nums, val);
cout << "Remaining elements count: " << result <<endl;
return 0;
}
OUTPUT:
Input: nums = [3,2,2,3], val = 3
Output: 2
################################################################################
Q3. Given a sorted array of distinct integers and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.
Ans3.
#include<bits/stdc++.h>
using namespace std;

int serachInsert(vector<int>nums,int target>{
  int low=0;
  int high=nums.size();
  while(low<=high){
  int mid=(low+high)/2;
  if(nums[mid]==target){
   return mid;
  }
  else if(nums[mid]>target){
    high=mid-1;
  }
  else
  {
    low=mid+1;
  }
  
  
  }

  return  low;
}
int main() {
   int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

int target;
cout << "Enter the target sum: ";
cin >> target<<endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    int index = searchInsert(nums, target);

    cout << "Target value index: " << index <<endl;

    return 0;
}
OUTPUT:
Input: nums = [1,3,5,6], target = 5

Output: 2
###################################################################################
Q4. You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Ans4.`
#include<bits/stdc++.h>
using namespace std;

vector<int> plusOne(vector<int>& digits) {
    int n = digits.size();

    for (int i = n - 1; i >= 0; i--) {
        if (digits[i] < 9) {
            digits[i]++;
            return digits;
        } else {
            digits[i] = 0;
        }
    }

    // If the loop completes, it means all digits were 9
    digits.insert(digits.begin(), 1);
    return digits;
}
int main() {
  int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

int target;
cout << "Enter the target sum: ";
cin >> target<<endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    vector<int> result = plusOne(digits);

   cout << "Result: ";
    for (int digit : result) {
       cout << digit << " ";
    };

    return 0;
}
OUTPUT:
Input: digits = [1,2,3]
Output: [1,2,4]
####################################################################################
Q5. You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements 
in nums1 and nums2 respectively.Merge nums1 and nums2 into a single array sorted in non-decreasing order.
Ans5.
void merge(vector<int>& nums1, int m,vector<int>& nums2, int n) {
    int i = m - 1;
    int j = n - 1;
    int k = m + n - 1;
nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6]
    while (i >= 0 && j >= 0) {
        if (nums1[i] >= nums2[j]) {
            nums1[k] = nums1[i];
            i--;
        } else {
            nums1[k] = nums2[j];
            j--;
        }
        k--;
    }

    while (j >= 0) {
        nums1[k] = nums2[j];
        j--;
        k--;
    }
}

int main() {
    int m, n;
   cout << "Enter the number of elements in nums1: ";
   cin >> m;
   vector<int> nums1(m);
   cout << "Enter the elements of nums1: ";
    for (int i = 0; i < m; i++) {
       cin >> nums1[i];
    }

  cout << "Enter the number of elements in nums2: ";
   cin >> n;
   vector<int> nums2(n);
   cout << "Enter the elements of nums2 : ";
    for (int i = 0; i < n; i++) {
       cin >> nums2[i];
    }

    merge(nums1, m, nums2, n);

   cout << "Merged array: ";
    for (int num : nums1) {
        cout << num << " ";
    }
   

    return 0;
}


OUTPUT:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
####################################################################################
Q6. Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Ans6.


#include<bits/stdc++.h>
using namespace std;
int main() {
int n;
bool result=false;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
unordered_set<int> set;
    for (int i = 0; i < nums.size(); i++) {

        if (set.find(nums[i]!=set.end()) {
          result=true;
          break;
        }
    set.insert(num[i]);
    }
cout<<result;

return 0;
}

OUTPUT:
Input: nums = [1,2,3,1]

Output: true
####################################################################################
Q7. Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.
Ans7.
#include<bits/stdc++.h>
using namespace std;
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
int nonzero=0;
    for (int i = 0; i < nums.size(); i++) {
        if(nums[i]!=0){
          nums[nonzero]=nums[i];
          nonzero++;
        }
    }
 while (nonZeroIndex < n) {
        nums[nonZeroIndex] = 0;
        nonZeroIndex++;
    }
for(int i=0;i<n;i++)
{
cout<<nums[i];
}
return 0;
}
OUTPUT:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
####################################################################################
Q8.You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in 
got duplicated to another number in the set, which results in repetition of one number and loss of another number.
You are given an integer array nums representing the data status of this set after the error.

Ans8.

#include<bits/stdc++.h>
using namespace std;
int main() {
int n;
cout << "Enter the number of elements in the array: ";
cin>>n>>endl;

vector<int> nums(n);
cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
    vector<int>result;
    for (int i = 0; i < nums.size(); i++) {
        if(nums[i]!=i+1){
          result.push_back(nums[i]);
          result.push_back(i+1);
        }
    }

    for(int i=0;i<2;i++)
    {
    cout<<result[i];
    }
return 0;
}

OUTPUT:

Input: nums = [1,2,2,4]
Output: [2,3]
